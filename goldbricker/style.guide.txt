Glynlyon Style Guide

Technology


Database

Data migrations should be done in SQL by the database when possible. The performance will be much faster than that of a back end server trying to do the same thing. In the case of Grails migrations, we should use the sql option and all database scripts should be included in there, including transactional database rollbacks.


Back End


Front End

Architecture

Whenever possible you should only include minified versions of CSS and JavaScript files in production, especially from 3rd party libraries. Your own application specific code should also always be minified and or bundled in some way in production. There is a significant performance boost in doing this.

We should avoid iFrames at all cost.

All HTML elements that have IDs should have unique IDs.

Classes should always be preferred over inline styles. Inline CSS should be avoided at all cost.


Naming Conventions

JavaScript variables should use camel case and avoid using dashes and underscores as separators.
var variableName;

The underscore should only be used at the beginning of the variable name to denote that it is private inside a closure. The only exception is for global variables.
function thisFunction() {
	var _encapsulatedVariable;
}

Global JavaScript variables should be in all caps with underscores as separators.
VARIABLE_NAME

HTML and CSS names should be all lower case and use dashes as separators.
variable-name, button-add-campus, button-large


jQuery

The id selector is the preferred way (and preferred means the most performant, scalable method) to select a single element, when possible.
$('#element-id')

To select multiple similar elements (all LIs of a UL, all radio buttons, etc.) the preferred method is to add a unoique class to all of those elements and select them that way.
$('.element-class')

Find should only be used inside of an existing context, and not for its own sake. That is, if you are working inside a dialog that already has been declared as a jQuery variable, then find would be acceptable within that context to select an element, rather than traversing the entire DOM, especially for larger pages.
$('#parent-element').find('#child-element')


Documentation

Always document your JavaScript. Use the JS Doc format.


User Interface

Modals / Pop-ups
For form validation or other pages that require interaction from the user that the page then provides feedback on we generally add all messages into one modal so that the user only has one to deal with. The exception would be for extremely important messages that truly need to be in their own modal, but these are definitely the exception and not the rule. I cannot think of one example in our site where this is necessary.


Reference

Douglas Crockford
http://javascript.crockford.com/code.html
Google Style Guides
https://github.com/google/styleguide
JS Underscore
http://stackoverflow.com/questions/4146124/naming-formatting-standard-for-global-variables
JS Doc
http://usejsdoc.org/
